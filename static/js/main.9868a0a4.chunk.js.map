{"version":3,"sources":["ArticleCard.js","navbar.js","App.js","serviceWorker.js","index.js"],"names":["ArticleCard","props","href","onClick","target","rel","Card","image","header","title","meta","author","description","extra","Navbar","handleItemClick","e","name","setState","activeItem","state","blockchain","usBusiness","req","Request","fetch","then","response","json","data","articles","console","log","usBusinessNewsReq","usBusinessNews","blockchainCards","this","map","i","index","key","urlToImage","publishedAt","url","usBusinessNewsCards","Menu","pointing","position","Item","active","Input","icon","placeholder","Segment","style","align","Group","Component","App","className","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"ySAeeA,EAZK,SAACC,GAAD,OAClB,uBAAGC,KAAMD,EAAME,QAASC,OAAO,SAASC,IAAI,uBAC1C,kBAACC,EAAA,EAAD,CACAC,MAAON,EAAMM,MACbC,OAAQP,EAAMQ,MACdC,KAAMT,EAAMU,OACZC,YAAaX,EAAMW,YACnBC,MAAOZ,EAAMY,UCNIC,E,kDACjB,aAAe,IAAD,8BACV,gBAkCJC,gBAAkB,SAACC,EAAD,GAAkB,IAAZC,EAAW,EAAXA,KACpB,EAAKC,SAAS,CAAEC,WAAYF,KAlC5B,EAAKG,MAAQ,CACTD,WAAY,gCACZE,WAAY,GACZC,WAAY,IALN,E,gEASO,IAAD,OAEZC,EAAM,IAAIC,QADO,yHAErBC,MAAMF,GACDG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAEF,EAAKX,SAAS,CACVG,WAAYQ,EAAKC,WAErBC,QAAQC,IAAI,EAAKZ,MAAMC,eAG/B,IACIY,EAAoB,IAAIT,QADP,4GAEnBC,MAAMQ,GACHP,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAEF,EAAKX,SAAS,CACdgB,eAAgBL,EAAKC,WAErBC,QAAQC,IAAI,EAAKZ,MAAMc,qB,+BAS/B,IAAMC,EAAkBC,KAAKhB,MAAMC,WAAWgB,KAC1C,SAACC,EAAGC,GACJ,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLhC,MAAO+B,EAAEG,WACTjC,OAAQ8B,EAAE7B,MACVC,KAAM4B,EAAE3B,OACRC,YAAa0B,EAAE1B,YACfC,MAAOyB,EAAEI,YACTvC,QAAWmC,EAAEK,SAKfC,EAAsBR,KAAKhB,MAAME,WAAWe,KAC9C,SAACC,EAAGC,GACJ,OACI,kBAAC,EAAD,CACAC,IAAKD,EACLhC,MAAO+B,EAAEG,WACTjC,OAAQ8B,EAAE7B,MACVC,KAAM4B,EAAE3B,OACRC,YAAa0B,EAAE1B,YACfC,MAAOyB,EAAEI,YACTvC,QAAWmC,EAAEK,SAKbxB,EAAeiB,KAAKhB,MAApBD,WAEZ,OACE,6BACE,kBAAC0B,EAAA,EAAD,CAAMC,UAAQ,EAACC,SAAS,UACtB,kBAACF,EAAA,EAAKG,KAAN,CACE/B,KAAK,gCACLgC,OAAuB,kCAAf9B,EACRhB,QAASiC,KAAKrB,kBAEhB,kBAAC8B,EAAA,EAAKA,KAAN,CAAWE,SAAS,SAClB,kBAACF,EAAA,EAAKG,KAAN,KACE,kBAACE,EAAA,EAAD,CAAOC,KAAK,SAASC,YAAY,iBAKvC,kBAACC,EAAA,EAAD,KACI,yBAAKC,MAAO,CAAEC,MAAO,cACjB,kBAACjD,EAAA,EAAKkD,MAAN,KAEuB,kCAAfrC,EACIgB,EAAkBS,U,GA7FVa,aCarBC,G,8KAVX,OACE,yBAAKC,UAAU,OACb,gCACA,kBAAC,EAAD,Y,GANUC,IAAMH,YCQJI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.9868a0a4.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card } from 'semantic-ui-react'\r\n\r\nconst ArticleCard = (props) => (\r\n  <a href={props.onClick} target=\"_blank\" rel=\"noopener noreferrer\">\r\n    <Card\r\n    image={props.image}\r\n    header={props.title}\r\n    meta={props.author}\r\n    description={props.description}\r\n    extra={props.extra}\r\n      />\r\n  </a>\r\n)\r\n\r\nexport default ArticleCard","import React, { Component } from 'react'\r\nimport { Input, Menu, Segment, Card } from 'semantic-ui-react'\r\nimport ArticleCard from './ArticleCard'\r\n\r\nexport default class Navbar extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            activeItem: 'Blockchain news from news api',\r\n            blockchain: [],\r\n            usBusiness: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        var blockchainNews = 'http://newsapi.org/v2/everything?q=bitcoin&from=2020-06-19&sortBy=publishedAt&apiKey=ca4a4baadd7545febb3ce11685cc3649';\r\n        var req = new Request(blockchainNews);\r\n        fetch(req)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                // console.log(data);\r\n                this.setState({\r\n                    blockchain: data.articles\r\n                })\r\n                console.log(this.state.blockchain)\r\n            })\r\n\r\n        var usBusinessNews = 'http://newsapi.org/v2/top-headlines?country=us&category=business&apiKey=ca4a4baadd7545febb3ce11685cc3649';\r\n        var usBusinessNewsReq = new Request(usBusinessNews);\r\n          fetch(usBusinessNewsReq)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n            // console.log(data);\r\n                this.setState({\r\n                usBusinessNews: data.articles\r\n                })\r\n                console.log(this.state.usBusinessNews)\r\n            })\r\n    }\r\n    \r\n    handleItemClick = (e, { name }) => { \r\n        this.setState({ activeItem: name })\r\n    }\r\n\r\n    render() {\r\n        const blockchainCards = this.state.blockchain.map(\r\n            (i, index) => {\r\n            return (\r\n              <ArticleCard\r\n                key={index}\r\n                image={i.urlToImage}\r\n                header={i.title}\r\n                meta={i.author}\r\n                description={i.description}\r\n                extra={i.publishedAt}\r\n                onClick = {i.url}\r\n              />\r\n            )\r\n            })\r\n        \r\n        const usBusinessNewsCards = this.state.usBusiness.map(\r\n            (i, index) => {\r\n            return (\r\n                <ArticleCard\r\n                key={index}\r\n                image={i.urlToImage}\r\n                header={i.title}\r\n                meta={i.author}\r\n                description={i.description}\r\n                extra={i.publishedAt}\r\n                onClick = {i.url}\r\n                />\r\n            )\r\n            })\r\n        \r\n        const { activeItem } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Menu pointing position=\"center\">\r\n          <Menu.Item \r\n            name='Blockchain news from news api'\r\n            active={activeItem === 'Blockchain news from news api'}\r\n            onClick={this.handleItemClick}\r\n          />\r\n          <Menu.Menu position='right'>\r\n            <Menu.Item>\r\n              <Input icon='search' placeholder='Search...' />\r\n            </Menu.Item>\r\n          </Menu.Menu>\r\n        </Menu>\r\n\r\n        <Segment>\r\n            <div style={{ align: \"justified\"}}>\r\n                <Card.Group>\r\n                    {\r\n                        activeItem === 'Blockchain news from news api' ?\r\n                            blockchainCards : usBusinessNewsCards\r\n                    }\r\n                </Card.Group>\r\n            </div>\r\n        </Segment>\r\n            \r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\nimport Navbar from './navbar'\nimport './App.css';\n\nclass App extends React.Component{\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n        <Navbar />\n        </header>\n      </div>\n    );\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <App />,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}